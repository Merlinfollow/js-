/*
 * @,@Author: ,: your name
 * @,@Date: ,: 2020-12-25 10:21:54
 * @LastEditTime: 2021-04-29 15:48:36
 * @LastEditors: Please set LastEditors
 * @,@Description: ,: In User Settings Edit
 * @,@FilePath: ,: \test\test24.js
 */
// 稳定：如果a原本在b的前面，排序之后a仍然在b的前面。
// 不稳定:如果a原本在b的后面，排序之后a在b的前面。

// 看山是山，第一阶段。模仿
// 看山不是山，第二阶段，渗透思考
// 看山还是山，第三阶段，透过技术看业务，活学活用


// B树比红黑树层级增多了，减少了数据查找的次数和复杂度。


// 不同点是它们一个一个在演变的过程中通过IO从磁盘读取数据的原理进行一步步的演变，
// 每一次演变都是为了让节点的空间更合理的运用起来，从而使树的层级减少达到快速查找数据的目的。

// 在jdk7之前hashmap极端情况可能会出现这种情况：插入快，查询慢。所以其时间复杂度为（N）

// 红黑树，二叉树，平衡二叉树都遵循左小右大的规则


// 二叉树在查找数据时，时间复杂度最好的情况是O(logn),最坏情况下时间复杂度O(n)。

// 所以对于搜索、插入、删除操作较多的情况下，我们就用红黑树。

// 红黑树多用在内部排序，即全放在内存中的，STL的map和set的内部实现就是红黑树。

// B+树多用于外存上时，B+也被成为一个磁盘友好的数据结构。

// var b = a.slice()


var a = [ 'jack', 'rose', 'wade' ]
var b = a.slice()
b[1] = 'marry'
console.log(a)
console.log(b)

// 人人都是产品经理
