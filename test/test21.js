/*
 * @,@Author: ,: your name
 * @,@Date: ,: 2020-12-18 15:27:58
 * @,@LastEditTime: ,: 2020-12-22 09:40:18
 * @,@LastEditors: ,: Please set LastEditors
 * @,@Description: ,: In User Settings Edit
 * @,@FilePath: ,: \test\test21.js
 */

// https加密
// 公钥存放在服务端
// 数字证书
// 服务器通过CA认证得到证书,这个证书包含CA的私钥加密后的服务器公钥,客户端用预先存储在本地的CA公钥即可解密得到服务器的公钥,从而避免公钥被替换.

// 数字签名

// 在https协议下,服务器与客户端通过非对称加密的方式协商出一个对称加密的密钥完成加密过程.其中数字证书的作用是避免公钥被替换,而数字签名的作用是校验公钥的合法性.

// HTTPS的握手过程
// 明白了HTTPS的原理，握手过程就十分简单，总结如下：
// 1.客户端：发送random1 + 支持的加密算法 + SSL Version等信息
// 2.服务端：发送random2 + 选择的加密算法A + 证书
// 3.客户端：验证证书 + 公钥加密的random3
// 4.服务端：解密random3，此时两端共有random1，random2，random3，使用这3个随机数通过加密算法计算对称密钥即可。
// 以上只有random3是加密的，所以用random1 + 2 + 3 这3个随机数加密生成密钥。

// https加密
// 公钥放在服务器上
// 数字证书
// 服务器通过CA认证得到证书，这个证书包含CA的私钥加密后的服务器公钥，客户端用预先存储在本地的CA公钥即可解密得到服务器的公钥，从而避免公钥被替换。

// 数字签名

// 在https协议下，服务器与客户端通过非对称加密的方式协商出一个对称加密的密钥完成加密过程，其中数字证书的作用是避免公钥被替换，而数字签名的作用是校验公钥的合法性。

// HTTPS的握手过程
// 明白了HTTPS的原理，握手过程就十分简单，总结如下：
// 客户端：发送random1 + 支持的加密算法 + SSL Version 等信息
// 服务端：发送random2 + 选择的加密算法A + 证书
// 客户端：验证证书 + 公钥加密的random3
// 服务器：解密random3，此时两端共有random1，random2，random3，使用这三个随机数通过加密算法计算对称密钥即可。
// 以上只有random3是加密的，所以用random1+2+3这三个随机数加密生成密钥。



